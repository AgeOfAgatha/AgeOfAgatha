//[FRAGMENT SHADER]
#version 330 core
layout (location = 0) out vec4 FragColor;

in VERTEXOUT{
	vec4 Color;
	vec3 FragPos;
	vec3 Normal;
	vec2 TexCoord;
	float Blend;
	vec4 LightFragPos;
}fragmentin;

struct direclight{
	vec3 color;
	vec3 direction;
};

uniform int texture1set;
uniform sampler2D texture1;
uniform int texture2set;
uniform sampler2D texture2;

uniform direclight DirecLight;

uniform sampler2D DepthMap;

uniform vec4 ViewPos;
uniform int ALIAS;

float CalcDirecShadowFactor(vec3 lightDir){
	vec3 projCoords = fragmentin.LightFragPos.xyz / fragmentin.LightFragPos.w;
	projCoords = projCoords * 0.5 + 0.5;
	float currentDepth = projCoords.z;

	vec3 normal = normalize(fragmentin.Normal);
	float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);

	float shadow = 0.0;
	vec2 texelSize = 1.0 / textureSize(DepthMap, 0);
	for(int x = -ALIAS; x <= ALIAS; ++x){
		for(int y = -ALIAS; y <= ALIAS; ++y){
			float pcfDepth = texture(DepthMap, projCoords.xy + vec2(x, y) * texelSize).r; 
			shadow += currentDepth - bias > pcfDepth  ? 1.0 : 0.0;        
		}
	}
	shadow /= 4*ALIAS*ALIAS;

	if(projCoords.z > 1.0)
		shadow = 0.0;

	return shadow;
}

vec3 CalcBaseColor(){
	//Vertex color
	vec3 FragDiff = vec3(min(max(fragmentin.Color.x, 0.0f), 1.0f), min(max(fragmentin.Color.y, 0.0f), 1.0f), min(max(fragmentin.Color.z, 0.0f), 1.0f));
	//Textures
	if (texture1set == 1 || texture2set == 1){
		if (texture1set == 1 && texture2set != 1){
			FragDiff = FragDiff * texture(texture1, fragmentin.TexCoord).xyz;
		}
		if (texture1set != 1 && texture2set == 1){
			FragDiff = FragDiff * texture(texture1, fragmentin.TexCoord).xyz;
		}
		if (texture1set == 1 && texture2set == 1){
			FragDiff = FragDiff * mix(texture(texture1, fragmentin.TexCoord), texture(texture2, fragmentin.TexCoord), fragmentin.Blend).xyz;
		}
	}
	return FragDiff;
}

float CalcLightInternal(vec3 LightDirection){
	//Diffuse
	vec3 Normal = normalize(fragmentin.Normal);
	float Diffuse = max(dot(Normal, LightDirection), 0.0);
	//Specular
	vec3 ViewDir = normalize(ViewPos.xyz - fragmentin.FragPos);
	vec3 LightReflect = reflect(-LightDirection, Normal);
	vec3 HalfwayDir = normalize(LightDirection + ViewDir);  
	float SpecularFactor = dot(ViewDir, LightReflect) * dot(Normal, HalfwayDir);
	float Specular = SpecularFactor * pow(max(dot(Normal, HalfwayDir), 0.0), 64.0);

	return Diffuse + Specular;
}

void main(){ 
	vec3 LightDirection = DirecLight.direction;
	float Shadow = CalcDirecShadowFactor(LightDirection);

	FragColor = vec4((1.0 - Shadow) * CalcLightInternal(LightDirection) * DirecLight.color * CalcBaseColor(), 1.0);
}
