//[FRAGMENT SHADER]
#version 330 core
layout (location = 0) out vec4 FragColor;

in VERTEXOUT{
    vec4 Color;
    vec3 FragPos;
    vec3 Normal;
    vec2 TexCoord;
    float Blend;
}fragmentin;

struct light{
    vec3 color;
};

struct direclight{
    light base;
    vec3 direction;
};

struct spotlight{
    direclight direc;
    vec3 position;
    float fov;
    float constant;
    float linear;
    float exponential;
};
uniform int texture1set;
uniform sampler2D texture1;
uniform int texture2set;
uniform sampler2D texture2;

uniform direclight DirecLight;
uniform spotlight SpotLight;

uniform int LightType;
uniform samplerCube DepthMap;

uniform vec4 ViewPos;

uniform float Far_Plane;
uniform bool Shadows;


// array of offset direction for sampling
vec3 gridSamplingDisk[20] = vec3[](
   vec3(1, 1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1, 1,  1), 
   vec3(1, 1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1, 1, -1),
   vec3(1, 1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1, 1,  0),
   vec3(1, 0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1, 0, -1),
   vec3(0, 1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0, 1, -1)
);

float ShadowCalculation(vec3 FragToLight, float DiskRadius){
    float currentDepth = length(FragToLight);
    float shadow = 0.0;
    float bias = 0.15;
    int samples = 20;
    float viewDistance = length(ViewPos - vec4(fragmentin.FragPos, 1.0));
    for(int i = 0; i < samples; ++i){
        float closestDepth = texture(DepthMap, FragToLight + gridSamplingDisk[i] * DiskRadius).r;
        closestDepth *= Far_Plane;
        if(currentDepth - bias > closestDepth)
            shadow += 1.0;
    }
    shadow /= float(samples);
        
    return shadow;
}

vec3 CalcLightInternal(vec3 LightDirection, float Attenuation, vec3 Color, vec3 FragToLight, float DiskRadius){
	vec3 FragDiff = fragmentin.Color.xyz;

	if (texture1set == 1 || texture2set == 1){
		if (texture1set == 1 && texture2set != 1){
			FragDiff = FragDiff * texture(texture1, fragmentin.TexCoord).xyz;
		}
		if (texture1set != 1 && texture2set == 1){
			FragDiff = FragDiff * texture(texture1, fragmentin.TexCoord).xyz;
		}
		if (texture1set == 1 && texture2set == 1){
			FragDiff = FragDiff * mix(texture(texture1, fragmentin.TexCoord), texture(texture2, fragmentin.TexCoord), fragmentin.Blend).xyz;
		}
	}
	float Shadow = Shadows ? ShadowCalculation(FragToLight, DiskRadius) : 0.0;   

    //Diffuse
	vec3 Diffuse = max(dot(fragmentin.Normal, LightDirection), 0.0) * Color;
    //Specular
    vec3 ViewDir  = normalize(ViewPos.xyz - fragmentin.FragPos);
    vec3 HalfwayDir = normalize(LightDirection + ViewDir);  
    vec3 LightReflect = normalize(reflect(-LightDirection, fragmentin.Normal));
    float SpecularFactor = dot(ViewDir, LightReflect) * dot(fragmentin.Normal, HalfwayDir);
    float Specular = pow(max(SpecularFactor, 0.0), 32) * fragmentin.Color.w;
    //Attenuation
    Diffuse *= Attenuation;
    Specular *= Attenuation;
	vec3 Lighting = ((1.0 - Shadow) * (Diffuse + Specular)) * FragDiff; 
	
    return Lighting;
}

vec3 CalcDirectionalLight(){
    vec3 LightDirection = DirecLight.direction;
    float Attenuation = 1.0;
    vec3 Color = DirecLight.base.color;
    vec3 FragToLight = vec3(0) - LightDirection;
    
    return CalcLightInternal(LightDirection, Attenuation, Color, FragToLight, 25);
}

vec3 CalcSpotLight(){
    vec3 LightDirection = SpotLight.position - fragmentin.FragPos;
    float Distance = length(LightDirection);
    LightDirection = normalize(LightDirection);
    float Attenuation = 1.0 / (SpotLight.constant + SpotLight.linear * Distance + SpotLight.exponential * Distance * Distance);
    vec3 Color = SpotLight.direc.base.color;
    float DiskRadius = (1.0 - Attenuation) / 25.0;
    vec3 FragToLight = SpotLight.position - fragmentin.FragPos;

    return CalcLightInternal(LightDirection, Attenuation, Color, FragToLight, DiskRadius);
}

void main(){          
    if (LightType == 0){
        FragColor = vec4(CalcSpotLight(), 1.0);
    }
    if (LightType == 1){
        FragColor = vec4(CalcDirectionalLight(), 1.0);
    }
}