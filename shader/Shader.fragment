//[FRAGMENT SHADER]
#version 330 core

in VERTEXOUT{
	vec4 color;
	vec3 FragPos;
	vec3 Normal;
	vec2 texcoord;
	float blend;
}fragmentin;

out vec4 color;

uniform vec3 LightPosition;
uniform samplerCube depthMap;
uniform float FarPlane;

uniform int texture1set;
uniform sampler2D texture1;
uniform int texture2set;
uniform sampler2D texture2;

uniform vec4 ViewPos;

vec3 gridSamplingDisk[20] = vec3[](
   vec3(1, 1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1, 1,  1), 
   vec3(1, 1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1, 1, -1),
   vec3(1, 1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1, 1,  0),
   vec3(1, 0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1, 0, -1),
   vec3(0, 1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0, 1, -1)
);

float ShadowCalculation(vec3 fragPos, vec3 lightPos){
    // get vector between fragment position and light position
    vec3 fragToLight = fragPos - lightPos;
    // use the fragment to light vector to sample from the depth map    
    // float closestDepth = texture(depthMap, fragToLight).r;
    // it is currently in linear range between [0,1], let's re-transform it back to original depth value
    // closestDepth *= far_plane;
    // now get current linear depth as the length between the fragment and light position
    float currentDepth = length(fragToLight);
    // test for shadows
    // float bias = 0.05; // we use a much larger bias since depth is now in [near_plane, far_plane] range
    // float shadow = currentDepth -  bias > closestDepth ? 1.0 : 0.0;
    // PCF
    // float shadow = 0.0;
    // float bias = 0.05; 
    // float samples = 4.0;
    // float offset = 0.1;
    // for(float x = -offset; x < offset; x += offset / (samples * 0.5))
    // {
        // for(float y = -offset; y < offset; y += offset / (samples * 0.5))
        // {
            // for(float z = -offset; z < offset; z += offset / (samples * 0.5))
            // {
                // float closestDepth = texture(depthMap, fragToLight + vec3(x, y, z)).r; // use lightdir to lookup cubemap
                // closestDepth *= far_plane;   // Undo mapping [0;1]
                // if(currentDepth - bias > closestDepth)
                    // shadow += 1.0;
            // }
        // }
    // }
    // shadow /= (samples * samples * samples);
    float shadow = 0.0;
    float bias = 0.15;
    int samples = 20;
    float viewDistance = length(ViewPos.xyz - fragPos);
    float diskRadius = (1.0 + (viewDistance / FarPlane)) / 25.0;
    for(int i = 0; i < samples; ++i)
    {
        float closestDepth = texture(depthMap, fragToLight + gridSamplingDisk[i] * diskRadius).r;
        closestDepth *= FarPlane;   // undo mapping [0;1]
        if(currentDepth - bias > closestDepth)
            shadow += 1.0;
    }
    shadow /= float(samples);
        
    // display closestDepth as debug (to visualize depth cubemap)
    // FragColor = vec4(vec3(closestDepth / far_plane), 1.0);    
        
    return shadow;
}

vec3 BlinnPhong(vec3 normal, vec3 fragPos, vec3 lightPos, vec3 lightColor){
    // diffuse
    vec3 lightDir = normalize(lightPos - fragPos);
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse = diff * lightColor;
    // specular
    vec3 viewDir = normalize(ViewPos.xyz - fragPos);
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = 0.0;
    vec3 halfwayDir = normalize(lightDir + viewDir);  
    spec = pow(max(dot(normal, halfwayDir), 0.0), 64.0);
    vec3 specular = spec * lightColor;    
    // simple attenuation
    float max_distance = 4;
    float distance = length(lightPos - fragPos) / max_distance;
    float attenuation = 1.0 / (distance * distance);

    float shadow = ShadowCalculation(fragmentin.FragPos, lightPos);
    
    diffuse *= attenuation;
    specular *= attenuation;
    
    return (1.0 - shadow) * (diffuse + specular);
}

void main(){
    vec3 lightColors[1];
    lightColors[0] = vec3(0.5,0.5,0.5);
    vec3 lightPositions[1];
    lightPositions[0] = LightPosition;

	//texture
	if (texture1set == 1 || texture2set == 1){
		if (texture1set == 1 && texture2set != 1){
			color = texture(texture1, fragmentin.texcoord) * fragmentin.color;
		}
		if (texture1set != 1 && texture2set == 1){
			color = texture(texture1, fragmentin.texcoord) * fragmentin.color;
		}
		if (texture1set == 1 && texture2set == 1){
			color = mix(texture(texture1, fragmentin.texcoord), texture(texture2, fragmentin.texcoord), fragmentin.blend) * fragmentin.color;
		}
	}else{
		color = fragmentin.color;
	}
	//process lighting
	vec3 lighting = vec3(0.0);
    for(int i = 0; i < 1; ++i)
        lighting += BlinnPhong(normalize(fragmentin.Normal), fragmentin.FragPos, lightPositions[i], lightColors[i]);
    color *= vec4(lighting,1.0);
    color = pow(color, vec4(1.0/2.2));
}