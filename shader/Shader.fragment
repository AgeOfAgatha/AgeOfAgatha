//[FRAGMENT SHADER]
#version 330 core
in VERTEXOUT{
	vec4 color;
	vec3 lightPos;
	vec3 FragPos;
	vec4 FragPosLightSpace;
	vec3 Normal;
	vec2 texcoord;
	float blend;
}fragmentin;

out vec4 color;

uniform int texture1set;
uniform sampler2D texture1;
uniform int texture2set;
uniform sampler2D texture2;

uniform sampler2D shadowMap;

uniform vec4 ViewPos;

float ShadowCalculation(vec4 fragPosLightSpace, vec3 lightDir){
    // perform perspective divide
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    // transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;
    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth = texture(shadowMap, projCoords.xy).r; 
    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
    // calculate bias (based on depth map resolution and slope)
    vec3 normal = normalize(fragmentin.Normal);
    float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);
    // check whether current frag pos is in shadow
    // float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;
    // PCF
    float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
    for(int x = -1; x <= 1; ++x){
        for(int y = -1; y <= 1; ++y){
            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
            shadow += currentDepth - bias > pcfDepth  ? 1.0 : 0.0;        
        }    
    }
    shadow /= 9.0;
    
    // keep the shadow at 0.0 when outside the far_plane region of the light's frustum.
    if(projCoords.z > 1.0)
        shadow = 0.0;
        
    return shadow;
}

vec3 BlinnPhong(vec3 normal, vec3 fragPos, vec3 lightPos, vec3 lightColor){
    // diffuse
    vec3 lightDir = normalize(lightPos - fragPos);
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse = diff * lightColor;
    // specular
    vec3 viewDir = normalize(ViewPos.xyz - fragPos);
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = 0.0;
    vec3 halfwayDir = normalize(lightDir + viewDir);  
    spec = pow(max(dot(normal, halfwayDir), 0.0), 64.0);
    vec3 specular = spec * lightColor;    
    // simple attenuation
    float max_distance = 4;
    float distance = length(lightPos - fragPos) / max_distance;
    float attenuation = 1.0 / (distance * distance);

    float shadow = ShadowCalculation(fragmentin.FragPosLightSpace, lightDir);
    
    diffuse *= attenuation;
    specular *= attenuation;
    
    return (1.0 - shadow) * (diffuse + specular);
}

void main(){
    vec3 lightColors[1];
    lightColors[0] = vec3(0.5,0.5,0.5);
    vec3 lightPositions[1];
    lightPositions[0] = fragmentin.lightPos;

	//texture
	if (texture1set == 1 || texture2set == 1){
		if (texture1set == 1 && texture2set != 1){
			color = texture(texture1, fragmentin.texcoord) * fragmentin.color;
		}
		if (texture1set != 1 && texture2set == 1){
			color = texture(texture1, fragmentin.texcoord) * fragmentin.color;
		}
		if (texture1set == 1 && texture2set == 1){
			color = mix(texture(texture1, fragmentin.texcoord), texture(texture2, fragmentin.texcoord), fragmentin.blend) * fragmentin.color;
		}
	}else{
		color = fragmentin.color;
	}
	//process lighting
	vec3 lighting = vec3(0.0);
    for(int i = 0; i < 1; ++i)
        lighting += BlinnPhong(normalize(fragmentin.Normal), fragmentin.FragPos, lightPositions[i], lightColors[i]);
    color *= vec4(lighting,1.0);
    color = pow(color, vec4(1.0/2.2));
}